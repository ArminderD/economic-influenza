Pandemic influenza latent and infectious periods for calibration (serial interval is computed from simulation -- Bryan has a small script to compute it from simulation results, and is below; clarify with him on how to run it. 

Latent period:
day 1: 0.15
day 2: 0.75
day 3: 0.05
day 4: 0.05
(mean = 1 day; sd = 0.6325)

Infectious period:
day 1: 0.21
day 2: 0.73
day 3: 0.01
day 4: 0.01
day 5: 0.01
day 6: 0.01
day 7: 0.01
day 8: 0.01
(mean = 2 days; sd = 1.0583)

Serial interval = 2.8 days 




Code for calculating the serial interval
Basically you merge the first 2 columns of the EFO file to the 4th column of the EFO file (by PID and rep), calculate the difference between the “current day” and the day the “infecter” was infected, and then take means across reps / within reps, etc.



import pandas as pd
%matplotlib inline

def get_efo_headers(file):
    '''Given a path to the EFO file of a cell, return stats and header info'''
    f = open(file)
    l = f.readline()
    h = f.readline()
    popsize = int(l.rstrip().split(" ")[1])
    reps = int(l[1:].rstrip().split(" ")[3])
    header = h[1:].rstrip().split(" ")

    return popsize,reps,header

def read_efo(file,skip=2):
    '''
    Given a path to an EFO file return a clean efo dataframe
    which means strip the headers and label the columns nicely
    '''
    popsize,reps,header = get_efo_headers(file)
    efo = pd.read_table(file,sep=' ',skiprows=skip,names=['pid','rep','day','inf_id'])

    return efo

def calc_serialinterval(efo_file):
    efo_stats = get_efo_headers(efo_file)
    efo = read_efo(efo_file,skip=efo_stats[0]+3)
    day_inf = efo[['pid','rep','day']]

    si = efo.merge(day_inf,left_on=['rep','inf_id'],right_on=['rep','pid'])
    si.columns = ['pid','rep','day','inf_id','inf_id2','inf_day']
    si['interval'] = si['day'] - si['inf_day']

    mean_si = si.interval.mean()
    si.interval.hist(bins=8)
    #si.groupby('day')['interval'].mean().plot()

    return si

efo_stats = get_efo_headers('91150_EFO6')
efo_stats